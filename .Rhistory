kable()
rf_results %>%
collect_predictions() %>%
group_by(id) %>%
roc_curve(curr_out, c(.pred_1, .pred_2, .pred_3, .pred_4)) %>%
ggplot(aes(1 - specificity, sensitivity, color = id)) +
geom_abline(lty = 2, color = "gray80", size = 1.5) +
geom_path(show.legend = FALSE, alpha = 0.6, size = 1.2) +
coord_equal()
ofsted_tree_leaves <- ofsted_wf %>%
add_model(rf_mod) %>%
last_fit(ofsted_split)
ofsted_tree_leaves
ofsted_tree_root <- ofsted_filtered %>%
select(LAESTAB, Ofstedphase, Localauthority, Easting, Northing, Academy, DistrictAdministrativecode, LSOAcode, LACode, prev_out, current_out, IDACI, num_pupils)
ofsted_tree_root <- ofsted_tree_root %>%
mutate(prev_out = factor(prev_out),
curr_out = factor(current_out),
Ofstedphase = factor(Ofstedphase),
IDACI = factor(IDACI),
Academy = factor(Academy))
ofsted_tree_root <- ofsted_tree_root %>%
filter(!(is.na(IDACI)) & !(is.na(num_pupils)))
ofsted_tree_root <- ofsted_tree_root %>%
mutate(prev_good = ifelse(prev_out == "1" | prev_out == "2", "Y", "N"),
curr_good = ifelse(curr_out == "1" | curr_out == "2", "Y", "N"))
ofsted_tree_root <- ofsted_tree_root %>%
mutate(prev_good = factor(prev_good), curr_good = factor(curr_good))
ofsted_tree_sprout <- ofsted_tree_root %>%
select(prev_good, curr_good, Ofstedphase, Academy, IDACI, num_pupils)
set.seed(061183)
ofsted_split <- initial_split(ofsted_tree_sprout, strata = prev_good)
ofsted_train <- training(ofsted_split)
ofsted_test <- testing(ofsted_split)
set.seed(310188)
ofsted_boot <- bootstraps(ofsted_train)
ofsted_boot
log_reg_mod <- logistic_reg() %>%
set_engine("glm")
rf_mod <- rand_forest() %>%
set_mode("classification") %>%
set_engine("ranger")
ofsted_wf <- workflow() %>%
add_formula(curr_good ~ .)
ofsted_wf
log_res_results <- ofsted_wf %>%
add_model(log_reg_mod) %>%
fit_resamples(
resamples = ofsted_boot,
control = control_resamples(save_pred = TRUE, verbose = TRUE)
)
rf_results <- ofsted_wf %>%
add_model(rf_mod) %>%
fit_resamples(
resamples = ofsted_boot,
control = control_resamples(save_pred = TRUE, verbose = TRUE)
)
outlog <- collect_metrics(log_res_results)
out <- collect_metrics(rf_results)
out %>%
kable()
out2 <- rf_results %>%
conf_mat_resampled()
out2 %>%
kable()
rf_results %>%
collect_predictions() %>%
group_by(id) %>%
roc_curve(curr_good, .pred_N) %>%
ggplot(aes(1 - specificity, sensitivity, color = id)) +
geom_abline(lty = 2, color = "gray80", size = 1.5) +
geom_path(show.legend = FALSE, alpha = 0.6, size = 1.2) +
coord_equal()
ofsted_tree_leaves <- ofsted_wf %>%
add_model(rf_mod) %>%
last_fit(ofsted_split)
ofsted_tree_leaves
collect_metrics(ofsted_tree_leaves) %>%
kable()
ofsted_tree_leaves %>%
collect_predictions() %>%
ppv(dataset, .pred_class)
ofsted_tree_leaves %>%
collect_predictions() %>%
ppv(curr_good, .pred_class)
ofsted_tree_leaves %>%
collect_predictions() %>%
conf_mat(curr_good, .pred_class)
# ofsted_filtered_reg$prev_out <- as.factor(ofsted_filtered_reg$prev_out)
ofsted_filtered_reg$Ofstedphase <- as.factor(ofsted_filtered_reg$Ofstedphase)
ofsted_filtered$Ofstedphase <- as.factor(ofsted_filtered$Ofstedphase)
ofsted_filtered_logreg <- ofsted_filtered %>%
mutate(prev_out = factor(prev_out),
curr_out = factor(current_out),
IDACI = factor(IDACI),
Academy = factor(Academy))
logit <- glm(pos_out ~ prev_out + IDACI + Academy + Ofstedphase + daysbetween, data = ofsted_filtered_logreg, family = "binomial")
logit <- glm(curr_out ~ prev_out + IDACI + Academy + Ofstedphase + daysbetween, data = ofsted_filtered_logreg, family = "binomial")
ofsted_filtered_logreg <- ofsted_filtered %>%
mutate(prev_out = factor(prev_out),
curr_out = factor(current_out),
IDACI = factor(IDACI),
Academy = factor(Academy))
ofsted_filtered$Ofstedphase <- as.factor(ofsted_filtered$Ofstedphase)
ofsted_filtered_logreg <- ofsted_filtered %>%
mutate(prev_out = factor(prev_out),
curr_out = factor(current_out),
IDACI = factor(IDACI),
Academy = factor(Academy))
logit <- glm(curr_out ~ prev_out + IDACI + Academy + Ofstedphase + daysbetween, data = ofsted_filtered_logreg, family = "binomial")
summary(logit)
exp(coef(logit))
# Tree based regression?
ofsted_log_reg <- ofsted_filtered %>%
select(LAESTAB, Ofstedphase, Localauthority, Easting, Northing, Academy, DistrictAdministrativecode, LSOAcode, LACode, prev_out, current_out, IDACI, num_pupils)
ofsted_log_reg <- ofsted_log_reg %>%
mutate(prev_out = factor(prev_out),
curr_out = factor(current_out),
Ofstedphase = factor(Ofstedphase),
IDACI = factor(IDACI),
Academy = factor(Academy))
ofsted_log_reg <- ofsted_log_reg %>%
filter(!(is.na(IDACI)) & !(is.na(num_pupils)))
ofsted_log_reg <- ofsted_log_reg %>%
mutate(prev_good = ifelse(prev_out == "1" | prev_out == "2", "Y", "N"),
curr_good = ifelse(curr_out == "1" | curr_out == "2", "Y", "N"))
ofsted_log_reg <- ofsted_log_reg %>%
mutate(prev_good = factor(prev_good), curr_good = factor(curr_good))
logistic_reg() %>%
set_engine("glm") %>%
set_mode("classification") %>%
translate()
log_reg_model <- logistic_reg() %>%
set_engine("glm") %>%
set_mode("classification") %>%
translate()
View(log_res_results)
View(log_res_results[[5]][[1]])
ofsted_tree_root <- ofsted_filtered %>%
select(LAESTAB, Ofstedphase, Localauthority, Easting, Northing, Academy, DistrictAdministrativecode, LSOAcode, LACode, prev_out, current_out, IDACI, num_pupils)
ofsted_tree_root <- ofsted_tree_root %>%
mutate(prev_out = factor(prev_out),
curr_out = factor(current_out),
Ofstedphase = factor(Ofstedphase),
IDACI = factor(IDACI),
Academy = factor(Academy))
ofsted_tree_root <- ofsted_tree_root %>%
filter(!(is.na(IDACI)) & !(is.na(num_pupils)))
ofsted_tree_root <- ofsted_tree_root %>%
mutate(prev_good = ifelse(prev_out == "1" | prev_out == "2", "Y", "N"),
curr_good = ifelse(curr_out == "1" | curr_out == "2", "Y", "N"))
ofsted_tree_root <- ofsted_tree_root %>%
mutate(prev_good = factor(prev_good), curr_good = factor(curr_good))
ofsted_tree_sprout <- ofsted_tree_root %>%
select(prev_good, curr_good, Ofstedphase, Academy, IDACI, num_pupils)
set.seed(061183)
ofsted_split <- initial_split(ofsted_tree_sprout, strata = prev_good)
ofsted_train <- training(ofsted_split)
ofsted_test <- testing(ofsted_split)
set.seed(310188)
ofsted_boot <- bootstraps(ofsted_train)
ofsted_boot
log_reg_mod <- logistic_reg() %>%
set_engine("glm")
rf_mod <- rand_forest() %>%
set_mode("classification") %>%
set_engine("ranger")
ofsted_wf <- workflow() %>%
add_formula(curr_good ~ .)
ofsted_wf
log_res_results <- ofsted_wf %>%
add_model(log_reg_mod) %>%
fit_resamples(
resamples = ofsted_boot,
control = control_resamples(save_pred = TRUE, verbose = TRUE)
)
rf_results <- ofsted_wf %>%
add_model(rf_mod) %>%
fit_resamples(
resamples = ofsted_boot,
control = control_resamples(save_pred = TRUE, verbose = TRUE)
)
outlog <- collect_metrics(log_res_results)
out_log_pred <- log_res_results %>%
collect_predictions() %>%
ppv(curr_good, .pred_class)
View(out2)
View(out)
View(outlog)
View(out_log_pred)
out <- collect_metrics(rf_results)
out_tree_pred <- rf_results %>%
collect_predictions() %>%
ppv(curr_good, .pred_class)
View(out)
View(out_tree_pred)
test <- tibble(
LAESTAB = 3594026, Ofstedphase = "Secondary", Localauthority = "Wigan", Easting = 1001, Northing = 9009, DistrictAdminitrativecode = 9876564, LSOAcode = "E7894561", LACode = 359, prev_out = 3, IDACI = 4, num_pupils = 916
)
predict(rf_results, newdata = test)
predict(rf_mod, newdata = test)
predict(ofsted_wf, newdata = test)
predict(log_res_results, newdata = test)
ofsted_tree_root <- ofsted_filtered %>%
select(LAESTAB, Ofstedphase, Localauthority, Easting, Northing, Academy, DistrictAdministrativecode, LSOAcode, LACode, prev_out, current_out, IDACI, num_pupils)
ofsted_tree_root <- ofsted_tree_root %>%
mutate(prev_out = factor(prev_out),
curr_out = factor(current_out),
Ofstedphase = factor(Ofstedphase),
IDACI = factor(IDACI),
Academy = factor(Academy))
ofsted_tree_root <- ofsted_tree_root %>%
filter(!(is.na(IDACI)) & !(is.na(num_pupils)))
ofsted_tree_root <- ofsted_tree_root %>%
mutate(prev_good = ifelse(prev_out == "1" | prev_out == "2", "Y", "N"),
curr_good = ifelse(curr_out == "1" | curr_out == "2", "Y", "N"))
ofsted_tree_root <- ofsted_tree_root %>%
mutate(prev_good = factor(prev_good), curr_good = factor(curr_good))
ofsted_tree_sprout <- ofsted_tree_root %>%
select(prev_good, curr_good, Ofstedphase, Academy, IDACI, num_pupils)
set.seed(061183)
ofsted_split <- initial_split(ofsted_tree_sprout, strata = prev_good)
ofsted_train <- training(ofsted_split)
ofsted_test <- testing(ofsted_split)
set.seed(310188)
ofsted_boot <- bootstraps(ofsted_train)
ofsted_boot
log_reg_mod <- logistic_reg() %>%
set_engine("glm")
rf_mod <- rand_forest() %>%
set_mode("classification") %>%
set_engine("ranger")
ofsted_wf <- workflow() %>%
add_formula(curr_good ~ .)
ofsted_wf
log_res_results <- ofsted_wf %>%
add_model(log_reg_mod) %>%
fit_resamples(
resamples = ofsted_boot,
control = control_resamples(save_pred = TRUE, verbose = TRUE)
)
rf_results <- ofsted_wf %>%
add_model(rf_mod) %>%
fit_resamples(
resamples = ofsted_boot,
control = control_resamples(save_pred = TRUE, verbose = TRUE)
)
outlog <- collect_metrics(log_res_results)
out_log_pred <- log_res_results %>%
collect_predictions() %>%
ppv(curr_good, .pred_class)
out <- collect_metrics(rf_results)
out_tree_pred <- rf_results %>%
collect_predictions() %>%
ppv(curr_good, .pred_class)
test <- tibble(
LAESTAB = 3594026, Ofstedphase = "Secondary", Localauthority = "Wigan", Easting = 1001, Northing = 9009, DistrictAdminitrativecode = 9876564, LSOAcode = "E7894561", LACode = 359, prev_out = 3, IDACI = 4, num_pupils = 916
)
predict(log_res_results, newdata = test)
log_res_results %>%
predict(log_res_results, newdata = test)
log_res_results %>%
predict(log_res_results, newdata = test)
predict(log_res_results, newdata = test)
predict(log_res_results, new_data = test)
class(log_res_results)
class(rf_results)
class(log_res_results)
class(ofsted_wf)
class(log_reg_mod)
test <- crossing(LAESTAB = 3594026, Ofstedphase = "Secondary", Localauthority = "Wigan", Easting = 1001, Northing = 9009, DistrictAdminitrativecode = 9876564, LSOAcode = "E7894561", LACode = 359, prev_out = 3, curr_out = 4, IDACI = 4, num_pupils = 916)
View(test)
test <- crossing(prev_good = "N", curr_good = "N", Ofstedphase = "Secondary", Academy = "N", IDACI = 4, num_pupils = 916)
predict(log_res_results, new_data = test)
test <- tibble(prev_good = "N", curr_good = "N", Ofstedphase = "Secondary", Academy = "N", IDACI = 4, num_pupils = 916)
predict(log_res_results, new_data = test)
rf_results %>%
collect_predictions() %>%
group_by(id) %>%
roc_curve(curr_good, .pred_N) %>%
ggplot(aes(1 - specificity, sensitivity, color = id)) +
geom_abline(lty = 2, color = "gray80", size = 1.5) +
geom_path(show.legend = FALSE, alpha = 0.6, size = 1.2) +
coord_equal()
predict(rf_results, new_data = test)
View(ofsted_filtered)
test <- ofsted_filtered %>%
filter(LAESTAB = 3594026)
test <- ofsted_filtered %>%
filter(LAESTAB == 3594026)
View(test)
test <- ofsted_filtered %>%
filter(LAESTAB == 3594026) %>%
select(prev_good, curr_good, Ofstedphase, Academy, IDACI, num_pupils)
test <- ofsted_filtered %>%
filter(LAESTAB == 3594026) %>%
mutate(prev_out = factor(prev_out),
curr_out = factor(current_out),
Ofstedphase = factor(Ofstedphase),
IDACI = factor(IDACI),
Academy = factor(Academy),
prev_good = ifelse(prev_out == "1" | prev_out == "2", "Y", "N"),
curr_good = ifelse(curr_out == "1" | curr_out == "2", "Y", "N")) %>%
select(prev_good, curr_good, Ofstedphase, Academy, IDACI, num_pupils)
View(test)
predict(rf_results, new_data = test)
library(caret)
library(workflows)
library(glmnet)
predict(rf_results, new_data = test)
predict(rf_mod, new_data = test)
predict(fit(rf_mod), new_data = test)
print(rf_mod)
fit(
rf_results2 <- ofsted_wf %>%
fit(
rf_results2 <- ofsted_wf %>%
add_model(rf_mod) %>%
fit(
ofsted_boot,
control = control_resamples(save_pred = TRUE, verbose = TRUE))
print(rf_mod)
print(rf_results2)
rf_results2 <- ofsted_wf %>%
add_model(rf_mod) %>%
fit(
ofsted_boot,
control = control_resamples(save_pred = TRUE, verbose = TRUE))
rf_results2 <- ofsted_wf %>%
add_model(rf_mod) %>%
fit(
curr_good ~ ., data = ofsted_boot)
rf_results2 <- ofsted_wf %>%
add_model(rf_mod) %>%
fit(curr_good ~ ., data = ofsted_train)
rf_model <- rand_forest(trees = 100, mode = "classification") %>%
set_engine("ranger") %>%
fit(curr_good ~ ., data = ofsted_split)
rf_model <- rand_forest(trees = 100, mode = "classification") %>%
set_engine("ranger") %>%
fit(curr_good ~ ., data = ofsted_split)
rf_model <- rand_forest(trees = 100, mode = "classification") %>%
set_engine("ranger") %>%
fit(curr_good ~ ., data = ofsted_tree_sprout)
predict(rf_model, test)
predict(rf_model, test, prob)
predict(rf_model, test, .pred_class)
print(rf_model)
predict(rf_model, test, type = "prob")
predict(rf_model, test2, type = "prob")
test2 <- ofsted_filtered %>%
mutate(prev_out = factor(prev_out),
curr_out = factor(current_out),
Ofstedphase = factor(Ofstedphase),
IDACI = factor(IDACI),
Academy = factor(Academy),
prev_good = ifelse(prev_out == "1" | prev_out == "2", "Y", "N"),
curr_good = ifelse(curr_out == "1" | curr_out == "2", "Y", "N")) %>%
select(prev_good, curr_good, Ofstedphase, Academy, IDACI, num_pupils)
predict(rf_model, test2, type = "prob")
test2 <- ofsted_filtered %>%
mutate(prev_out = factor(prev_out),
curr_out = factor(current_out),
Ofstedphase = factor(Ofstedphase),
IDACI = factor(IDACI),
Academy = factor(Academy),
prev_good = ifelse(prev_out == "1" | prev_out == "2", "Y", "N"),
curr_good = ifelse(curr_out == "1" | curr_out == "2", "Y", "N")) %>%
select(prev_good, curr_good, Ofstedphase, Academy, IDACI, num_pupils) %>%
filter(!(is.na(IDACI)) & !(is.na(num_pupils)))
predict(rf_model, test2, type = "prob")
predict(rf_model, test2, type = "raw")
test_outcome <- predict(rf_model, test2, type = "prob")
View(test_outcome)
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE)
# note that R will complain about the space in the filename
# it's best to rename the file but if I do that it will mess up
# the Git changes
# This lists all the packages used in the project, more packages may be added as the project rolls on!
if(!require("tidyverse")) install.packages("tidyverse", dependencies = TRUE)
if(!require("openxlsx")) install.packages("openxlsx", dependencies = TRUE)
if(!require("stringr")) install.packages("stringr", dependencies = TRUE)
if(!require("pivottabler")) install.packages("pivottabler", dependencies = TRUE)
if(!require("devtools")) install.packages("devtools", dependencies = TRUE)
if(!require("rpart")) install.packages("rpart", dependencies = TRUE)
if(!require("rpart.plot")) install.packages("rpart.plot", dependencies = TRUE)
if(!require("tidymodels")) install.packages("tidymodels", dependencies = TRUE)
if(!require("broom.mixed")) install.packages("broom.mixed", dependencies = TRUE)
if(!require("readr")) install.packages("readr", dependencies = TRUE)
if(!require("rstanarm")) install.packages("rstanarm", dependencies = TRUE)
if(!require("ranger")) install.packages("ranger", dependencies = TRUE)
if(!require("knitr")) install.packages("knitr", dependencies = TRUE)
# The data I need is on the 10th sheet and I'm also interested in dates. Also the top row is not the header row for the sheet, hence the different start row.
ofsted <- read.xlsx(
"data/Management_information_-_state-funded_schools_-_as_at_31_August_2020.xlsx",
sheet = 10,
startRow = 2,
detectDates = TRUE,
na.strings = "NULL"
)
edubase <- read_csv(
"data/edubasealldata20200921.csv",
col_types = cols(`SEN13 (name)` = col_skip(),
FEHEIdentifier = col_skip(),
InspectorateReport = col_skip(),
DateOfLastInspectionVisit = col_skip(),
SiteName = col_skip()
),
guess_max = 10000
)
edubase_to_ofsted <- select(
mutate(
edubase,
Academy = ifelse(`EstablishmentTypeGroup (code)` == 10 | `EstablishmentTypeGroup (code)` == 11,1,0)),
URN,
Easting,
Northing,
Academy,
`DistrictAdministrative (code)`,
`DistrictAdministrative (name)`,
`LSOA (name)`,
`LSOA (code)`
)
ofsted <- left_join(x = ofsted, y = edubase_to_ofsted, x.URN = y.URN)
ofsted <- mutate(ofsted, LA.Code = as.integer(substr(LAESTAB,1,3)))
ofsted <- ofsted %>%
mutate(days_between = Publication.date - Previous.publication.date)
ofsted_filtered <- filter(ofsted, !is.na(Previous.full.inspection.overall.effectiveness))
# The IDACI part had () as part of the name and that was causing a lot of issues so the following piece of code goes through all the column names of the dataframe and removes punctuation and spaces. Hopefully this is something that can be done earlier on, possibly when the files are read in at some point.
colnames(ofsted_filtered) <- str_replace_all(colnames(ofsted_filtered),"[:punct:]|[:space:]","")
ofsted_filtered <- mutate(ofsted_filtered, prev_out = as.integer(ifelse(Previousfullinspectionoveralleffectiveness == "NULL", -1, Previousfullinspectionoveralleffectiveness)))
ofsted_filtered <- mutate(ofsted_filtered, curr_out = as.integer(ifelse(Overalleffectiveness == "NULL", -1, Overalleffectiveness)))
ofsted_filtered <- mutate(ofsted_filtered, IDACI = as.integer(ifelse(TheincomedeprivationaffectingchildrenindexIDACIquintile == "NULL", -1, TheincomedeprivationaffectingchildrenindexIDACIquintile)))
ofsted_filtered <- mutate(ofsted_filtered, num_pupils = as.integer(ifelse(Totalnumberofpupils == "NULL", -1, Totalnumberofpupils)))
ofsted_filtered <- ofsted_filtered %>%
select(LAESTAB, Ofstedphase, Easting, Northing, Academy, DistrictAdministrativecode, LSOAcode, LACode, prev_out, curr_out, IDACI, num_pupils)
ofsted_filtered <- ofsted_filtered %>%
mutate(prev_out = factor(prev_out),
curr_out = factor(curr_out),
Ofstedphase = factor(Ofstedphase),
IDACI = factor(IDACI),
Academy = factor(Academy))
ofsted_filtered <- ofsted_filtered %>%
filter(!(is.na(IDACI)) & !(is.na(num_pupils)))
ofsted_filtered <- ofsted_filtered %>%
mutate(prev_good = ifelse(prev_out == "1" | prev_out == "2", "Y", "N"),
curr_good = ifelse(curr_out == "1" | curr_out == "2", "Y", "N")) %>%
mutate(prev_good = factor(prev_good), curr_good = factor(curr_good))
warwickshire_future <- ofsted_filtered %>%
filter(LACode == 937) %>%
select(-prev_out, -prev_good) %>%
rename(prev_out = curr_out) %>%
rename(prev_good = curr_good) %>%
add_column(curr_good = NA) %>%
mutate(curr_good = as.factor(curr_good))
ofsted_filtered_model <- ofsted_filtered %>%
select(-curr_out)
rf_model <- rand_forest(trees = 100, mode = "classification") %>%
set_engine("ranger") %>%
fit(curr_good ~ ., data = ofsted_filtered_model)
test <- ofsted_filtered %>%
filter(LAESTAB == 3594026) %>%
mutate(prev_out = factor(prev_out),
curr_out = factor(curr_out),
Ofstedphase = factor(Ofstedphase),
IDACI = factor(IDACI),
Academy = factor(Academy),
prev_good = ifelse(prev_out == "1" | prev_out == "2", "Y", "N"),
curr_good = ifelse(curr_out == "1" | curr_out == "2", "Y", "N")) %>%
mutate(prev_good = factor(prev_good),
curr_good = factor(curr_good)) %>%
select(LAESTAB, Ofstedphase, Easting, Northing, Academy, DistrictAdministrativecode, LSOAcode, LACode, prev_out, IDACI, num_pupils, prev_good, curr_good)
test_rf_outcome <- predict(rf_model, test, type = "prob")
model_rf_outcome <- predict(rf_model, warwickshire_future, type = "prob")
View(warwickshire_future)
View(model_rf_outcome)
warwickshire_map_output <- bind_cols(warwickshire_future, model_rf_outcome)
View(warwickshire_map_output)
warwickshire_map_output <- warwickshire_map_output %>%
rename(bad_out_chance = .pred_N) %>%
rename(good_out_chance = .pred_Y)
write.csv(warwickshire_map_output, file = "C:\Users\acar3\OneDrive - Warwickshire County Council\Desktop\Data Science Accelerator\Ofsted Outcome Predictor\Ofsted-Outcome-Predictor\data\Inspection Outcome Map Data.csv")
warwickshire_map_output <- warwickshire_map_output %>%
rename(bad_out_chance = .pred_N) %>%
rename(good_out_chance = .pred_Y)
write.csv(warwickshire_map_output, file = "C:/Users/acar3/OneDrive - Warwickshire County Council/Desktop/Data Science Accelerator/Ofsted Outcome Predictor/Ofsted-Outcome-Predictor/data/Inspection Outcome Map Data.csv")
View(ofsted)
ofsted_rejoin <- ofsted %>%
select(URN, LAESTAB, School.name, Type.of.education, Region, Local.authority, Publication.date, Overall.effectiveness, Previous.publication.date, Previous.full.inspection.overall.effectiveness, days_between)
colnames(ofsted_rejoin) <- str_replace_all(colnames(ofsted_rejoin),"[:punct:]|[:space:]","")
warwickshire_map_output <- warwickshire_map_output %>%
select(LAESTAB, Ofstedphase, Easting, Northing, Academy, DistrictAdministrativecode, LSOAcode, LACode, IDACI, num_pupils, bad_out_chance, good_out_chance)
warwickshire_map_output <- left_join(x = warwickshire_map_output, y = ofsted_rejoin, x.LAESTAB = y.LAESTAB)
View(warwickshire_map_output)
write.csv(warwickshire_map_output, file = "C:/Users/acar3/OneDrive - Warwickshire County Council/Desktop/Data Science Accelerator/Ofsted Outcome Predictor/Ofsted-Outcome-Predictor/data/Inspection Outcome Map Data.csv")
log_reg_mod <- logistic_reg() %>%
set_engine("glm") %>%
set_mode("classification")
log_reg_model <- log_reg_mod %>%
fit(data = ofsted_filtered_model)
log_reg_mod <- logistic_reg() %>%
set_engine("glm") %>%
set_mode("classification") %>%
add_formula(curr_good ~ .)
log_reg_mod <- logistic_reg() %>%
set_engine("glm") %>%
set_mode("classification")
ofsted_wf <- workflow() %>%
add_formula(curr_good ~ .)
log_reg_model <- ofsted_wf %>%
add_model(log_reg_mod) %>%
fit(data = ofsted_filtered_model)
