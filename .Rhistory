ofsted_filtered_chart <- ofsted_filtered_chart %>%
add_row(warks_filtered)
ggplot(ofsted_filtered_chart) +
geom_bar(mapping = aes(x = Previous.full.inspection.overall.effectiveness,
fill = as.character(Overall.effectiveness)
),
position = "Fill"
) +
facet_wrap(~ plotGroup)
# The IDACI part had () as part of the name and that was causing a lot of issues so the following piece of code goes through all the column names of the dataframe and removes punctuation and spaces. Hopefully this is something that can be done earlier on, possibly when the files are read in at some point.
colnames(ofsted_filtered) <- str_replace_all(colnames(ofsted_filtered),"[:punct:]|[:space:]","")
ofsted_filtered <- mutate(ofsted_filtered, prev_out = as.integer(ifelse(Previousfullinspectionoveralleffectiveness == "NULL", -1, Previousfullinspectionoveralleffectiveness)))
ofsted_filtered <- mutate(ofsted_filtered, current_out = as.integer(ifelse(Overalleffectiveness == "NULL", -1, Overalleffectiveness)))
ofsted_filtered <- mutate(ofsted_filtered, IDACI = as.integer(ifelse(TheincomedeprivationaffectingchildrenindexIDACIquintile == "NULL", -1, TheincomedeprivationaffectingchildrenindexIDACIquintile)))
ofsted_filtered <- mutate(ofsted_filtered, num_pupils = as.integer(ifelse(Totalnumberofpupils == "NULL", -1, Totalnumberofpupils)))
ofsted_filtered_reg <- filter(ofsted_filtered, prev_out != -1 & current_out != -1 & IDACI != -1 & num_pupils != -1)
ofsted_filtered_reg <- mutate(ofsted_filtered_reg, pos_out = ifelse(current_out - prev_out <= 0,1,0))
ofsted_filtered_reg <- mutate(ofsted_filtered_reg, outcome_change = ifelse(Previousfullinspectionoveralleffectiveness == -1 | Overalleffectiveness == -1, -1, Overalleffectiveness - Previousfullinspectionoveralleffectiveness))
ofsted_filtered_reg_tree <- filter(ofsted_filtered_reg, outcome_change == 1)
ofsted_filtered_reg_tree$Ofstedphase <- as.factor(ofsted_filtered_reg_tree$Ofstedphase)
ofsted_filtered_reg_tree <- ofsted_filtered_reg_tree %>%
mutate(prev_out = factor(prev_out),
IDACI = factor(IDACI),
Academy = factor(Academy))
tree_test <- data_frame(ofsted_filtered_reg_tree)
tree <- rpart(current_out ~ prev_out + days_between, data = tree_test, method = "class")
View(ofsted_filtered_reg_tree)
tree_test <- data_frame(ofsted_filtered_reg_tree)
tree <- rpart(current_out ~ prev_out + daysbetween, data = tree_test, method = "class")
printcp(tree)
plotcp(tree)
rsq.rpart(tree)
print(tree)
summary(tree)
plot(tree)
text(tree)
# ofsted_filtered_reg$prev_out <- as.factor(ofsted_filtered_reg$prev_out)
ofsted_filtered_reg$Ofstedphase <- as.factor(ofsted_filtered_reg$Ofstedphase)
ofsted_filtered_reg <- ofsted_filtered_reg %>%
mutate(prev_out = factor(prev_out),
IDACI = factor(IDACI),
Academy = factor(Academy))
logit <- glm(pos_out ~ prev_out + IDACI + Academy + Ofstedphase + daysbetween, data = ofsted_filtered_reg, family = "binomial")
summary(logit)
exp(coef(logit))
# Tree based regression?
tree_test <- data_frame(ofsted_filtered_reg_tree)
tree <- rpart(current_out ~ prev_out + Ofstedphase, data = tree_test, method = "class")
printcp(tree)
plotcp(tree)
rsq.rpart(tree)
print(tree)
summary(tree)
plot(tree)
text(tree)
tree_test <- data_frame(ofsted_filtered_reg_tree)
tree <- rpart(current_out ~ Ofstedphase, data = tree_test, method = "class")
printcp(tree)
plotcp(tree)
rsq.rpart(tree)
print(tree)
summary(tree)
plot(tree)
tree_test <- data_frame(ofsted_filtered_reg_tree)
tree <- rpart(current_out ~ prev_out, data = tree_test, method = "class")
printcp(tree)
plotcp(tree)
rsq.rpart(tree)
print(tree)
summary(tree)
plot(tree)
text(tree)
# This lists all the packages used in the project, more packages may be added as the project rolls on!
if(!require("tidyverse")) install.packages("tidyverse", dependencies = TRUE)
if(!require("openxlsx")) install.packages("openxlsx", dependencies = TRUE)
if(!require("stringr")) install.packages("stringr", dependencies = TRUE)
if(!require("pivottabler")) install.packages("pivottabler", dependencies = TRUE)
if(!require("devtools")) install.packages("devtools", dependencies = TRUE)
if(!require("rpart")) install.packages("rpart", dependencies = TRUE)
if(!require("rpart.plot")) install.packages("rpart.plot", dependencies = TRUE)
if(!require("tidymodels")) install.packages("tidymodels", dependencies = TRUE)
library(tidyverse)
library(openxlsx)
library(stringr)
library(pivottabler)
library(devtools)
library(rpart)
library(rpart.plot)
library(tidymodels)
# This lists all the packages used in the project, more packages may be added as the project rolls on!
if(!require("tidyverse")) install.packages("tidyverse", dependencies = TRUE)
if(!require("openxlsx")) install.packages("openxlsx", dependencies = TRUE)
if(!require("stringr")) install.packages("stringr", dependencies = TRUE)
if(!require("pivottabler")) install.packages("pivottabler", dependencies = TRUE)
if(!require("devtools")) install.packages("devtools", dependencies = TRUE)
if(!require("rpart")) install.packages("rpart", dependencies = TRUE)
if(!require("rpart.plot")) install.packages("rpart.plot", dependencies = TRUE)
if(!require("tidymodels")) install.packages("tidymodels", dependencies = TRUE)
if(!require("broom.mixed")) install.packages("broom.mixed", dependencies = TRUE)
if(!require("readr")) install.packages("readr", dependencies = TRUE)
if(!require("rstanarm")) install.packages("rstanarm", dependencies = TRUE)
library(tidyverse)
library(openxlsx)
library(stringr)
library(pivottabler)
library(devtools)
library(rpart)
library(rpart.plot)
library(tidymodels)
library(broom.mixed)
library(readr)
library(rstanarm)
dt <- decision_tree(
mode = "classification"
) %&gt;%
set_engine("rpart") %gt;%
set_mode("regression") %gt;%
translate()
dt <- decision_tree(
mode = "classification"
) %>%
set_engine("rpart") %>%
set_mode("regression") %>%
translate()
View(dt)
dt <- decision_tree() %>%
set_engine("rpart") %>%
set_mode("classification") %>%
translate()
dt <- decision_tree() %>%
set_engine("rpart") %>%
set_mode("classification") %>%
translate()
dt_fit <- dt %>%
fit(curr_outcome ~ prev_outcome, data = ofsted_filtered_reg_tree)
dt <- decision_tree() %>%
set_engine("rpart") %>%
set_mode("classification") %>%
translate()
dt_fit <- dt %>%
fit(current_out ~ prev_out, data = ofsted_filtered_reg_tree)
ofsted_filtered_reg <- ofsted_filtered_reg %>%
mutate(prev_out = factor(prev_out),
curr_out = factor(current_out),
IDACI = factor(IDACI),
Academy = factor(Academy))
dt <- decision_tree() %>%
set_engine("rpart") %>%
set_mode("classification") %>%
translate()
dt_fit <- dt %>%
fit(curr_out ~ prev_out, data = ofsted_filtered_reg_tree)
ofsted_filtered_reg_tree <- ofsted_filtered_reg_tree %>%
mutate(prev_out = factor(prev_out),
curr_out = factor(current_out),
IDACI = factor(IDACI),
Academy = factor(Academy))
dt <- decision_tree() %>%
set_engine("rpart") %>%
set_mode("classification") %>%
translate()
dt_fit <- dt %>%
fit(curr_out ~ prev_out, data = ofsted_filtered_reg_tree)
tify(dt_fit)
tidy(dt_fit)
new_points <- expand.grid(prev_out = factor(c(1,2,3,4)))
mean_pred <- predict(dt_fit, new_points)
mean_pred <- predict(dt_fit, new_data = new_points)
mean_pred <- predict(dt_fit, newdata = new_points)
mean_pred <- predict(dt_fit, new_data = new_points)
View(new_points)
set.seed(061183)
ofsted_split <- initial_split(ofsted_filtered_reg_tree, strata = prev_out)
ofsted_train <- training(ofsted_split)
ofsted_test <- testing(ofsted_split)
ofsted_boot <- bootstraps(ofsted_train)
ofsted_boot
View(ofsted_boot)
ofsted_boot <- bootstraps(ofsted_train)
ofsted_boot <- bootstraps(ofsted_train)
set.seed(310188)
ofsted_boot <- bootstraps(ofsted_train)
ofsted_boot
View(ofsted_boot)
set.seed(061183)
ofsted_split <- initial_split(ofsted_filtered_reg_tree, strata = prev_out)
ofsted_train <- training(ofsted_split)
ofsted_test <- testing(ofsted_split)
set.seed(310188)
ofsted_boot <- bootstraps(ofsted_train)
ofsted_boot
log_reg_mod <- logistic_reg() %>%
set_engine("glm")
rf_mod <- rand_forest() %>%
set_mode("classification") %>%
set_engine("ranger")
ofsted_wf <- workflow() %>%
add_formula(curr_out ~ .)
ofsted_wf
ofsted_wf %>%
add_model(log_reg_mod) %>%
fit()
ofsted_wf %>%
add_model(log_reg_mod) %>%
fit(data - ofsted_train)
ofsted_wf %>%
add_model(log_reg_mod) %>%
fit(data = ofsted_train)
View(ofsted_filtered_reg_tree)
ofsted_tree_root <- ofsted_filtered_reg_tree %>%
select(LAESTAB, Ofstedphase, Localauthority, Easting, Northing, Academy, DistrictAdministrativecode, LSOAcode, LACode, prev_out, curr_out, IDACI, num_pupils)
set.seed(061183)
ofsted_split <- initial_split(ofsted_tree_root, strata = prev_out)
ofsted_train <- training(ofsted_split)
ofsted_test <- testing(ofsted_split)
set.seed(310188)
ofsted_boot <- bootstraps(ofsted_train)
ofsted_boot
log_reg_mod <- logistic_reg() %>%
set_engine("glm")
rf_mod <- rand_forest() %>%
set_mode("classification") %>%
set_engine("ranger")
ofsted_wf <- workflow() %>%
add_formula(curr_out ~ .)
ofsted_wf
ofsted_wf %>%
add_model(log_reg_mod) %>%
fit(data = ofsted_train)
ofsted_tree_sprout <- ofsted_tree_root %>%
select(prev_out, curr_out, Ofstedphase, Academy, IDACI, num_pupils)
ofsted_split <- initial_split(ofsted_tree_sprout, strata = prev_out)
set.seed(061183)
ofsted_split <- initial_split(ofsted_tree_sprout, strata = prev_out)
ofsted_train <- training(ofsted_split)
ofsted_test <- testing(ofsted_split)
set.seed(310188)
ofsted_boot <- bootstraps(ofsted_train)
ofsted_boot
log_reg_mod <- logistic_reg() %>%
set_engine("glm")
rf_mod <- rand_forest() %>%
set_mode("classification") %>%
set_engine("ranger")
ofsted_wf <- workflow() %>%
add_formula(curr_out ~ .)
ofsted_wf
ofsted_wf %>%
add_model(log_reg_mod) %>%
fit(data = ofsted_train)
log_res_results <- ofsted_wf %>%
add_model(log_reg_mod) %>%
fit_resamples(
resamples = ofsted_boot,
control = control_resamples(save_pred = TRUE, verbose = TRUE)
)
View(log_res_results)
View(log_res_results[[4]][[1]])
rf_results <- ofsted_wf %>%
add_model(rf_mod) %>%
fit_resamples(
resamples = ofsted_boot,
control = control_resamples(save_pred = TRUE, verbose = TRUE)
)
rf_mod <- rand_forest() %>%
set_mode("classification") %>%
set_engine("randomForest")
rf_results <- ofsted_wf %>%
add_model(rf_mod) %>%
fit_resamples(
resamples = ofsted_boot,
control = control_resamples(save_pred = TRUE, verbose = TRUE)
)
if(!require("ranger")) install.packages("ranger", dependencies = TRUE)
library(ranger)
rf_mod <- rand_forest() %>%
set_mode("classification") %>%
set_engine("ranger")
rf_results <- ofsted_wf %>%
add_model(rf_mod) %>%
fit_resamples(
resamples = ofsted_boot,
control = control_resamples(save_pred = TRUE, verbose = TRUE)
)
View(rf_results)
View(rf_results[[5]][[1]])
collect_metrics(rf_results)
(collect_metrics(rf_results))
out <- collect_metrics(rf_results)
out
View(out)
rf_results %>%
conf_mat_resampled()
out2 <- rf_results %>%
conf_mat_resampled()
ou2
out2
View(out2)
out3 <- rf_results %>%
collect_predictions()
out3
View(out3)
View(ofsted_filtered)
ofsted_tree_root <- ofsted_filtered %>%
select(LAESTAB, Ofstedphase, Localauthority, Easting, Northing, Academy, DistrictAdministrativecode, LSOAcode, LACode, prev_out, curr_out, IDACI, num_pupils)
ofsted_tree_root <- ofsted_filtered %>%
select(LAESTAB, Ofstedphase, Localauthority, Easting, Northing, Academy, DistrictAdministrativecode, LSOAcode, LACode, prev_out, current_out, IDACI, num_pupils)
ofsted_tree_sprout <- ofsted_tree_root %>%
select(prev_out, current_out, Ofstedphase, Academy, IDACI, num_pupils)
set.seed(061183)
ofsted_split <- initial_split(ofsted_tree_sprout, strata = prev_out)
ofsted_train <- training(ofsted_split)
ofsted_test <- testing(ofsted_split)
set.seed(310188)
ofsted_boot <- bootstraps(ofsted_train)
ofsted_boot
log_reg_mod <- logistic_reg() %>%
set_engine("glm")
rf_mod <- rand_forest() %>%
set_mode("classification") %>%
set_engine("ranger")
ofsted_wf <- workflow() %>%
add_formula(current_out ~ .)
ofsted_wf
log_res_results <- ofsted_wf %>%
add_model(log_reg_mod) %>%
fit_resamples(
resamples = ofsted_boot,
control = control_resamples(save_pred = TRUE, verbose = TRUE)
)
rf_results <- ofsted_wf %>%
add_model(rf_mod) %>%
fit_resamples(
resamples = ofsted_boot,
control = control_resamples(save_pred = TRUE, verbose = TRUE)
)
ofsted_tree_root <- ofsted_filtered %>%
select(LAESTAB, Ofstedphase, Localauthority, Easting, Northing, Academy, DistrictAdministrativecode, LSOAcode, LACode, prev_out, current_out, IDACI, num_pupils)
ofsted_tree_root <- ofsted_tree_root %>%
mutate(prev_out = factor(prev_out),
curr_out = factor(current_out),
Ofstedphase = factor(Ofstedphase)
IDACI = factor(IDACI),
ofsted_tree_root <- ofsted_tree_root %>%
mutate(prev_out = factor(prev_out),
curr_out = factor(current_out),
Ofstedphase = factor(Ofstedphase),
IDACI = factor(IDACI),
Academy = factor(Academy))
ofsted_tree_sprout <- ofsted_tree_root %>%
select(prev_out, current_out, Ofstedphase, Academy, IDACI, num_pupils)
set.seed(061183)
ofsted_split <- initial_split(ofsted_tree_sprout, strata = prev_out)
ofsted_train <- training(ofsted_split)
ofsted_test <- testing(ofsted_split)
set.seed(310188)
ofsted_boot <- bootstraps(ofsted_train)
ofsted_boot
log_reg_mod <- logistic_reg() %>%
set_engine("glm")
rf_mod <- rand_forest() %>%
set_mode("classification") %>%
set_engine("ranger")
ofsted_wf <- workflow() %>%
add_formula(current_out ~ .)
ofsted_wf
log_res_results <- ofsted_wf %>%
add_model(log_reg_mod) %>%
fit_resamples(
resamples = ofsted_boot,
control = control_resamples(save_pred = TRUE, verbose = TRUE)
)
ofsted_tree_sprout <- ofsted_tree_root %>%
select(prev_out, curr_out, Ofstedphase, Academy, IDACI, num_pupils)
set.seed(061183)
ofsted_split <- initial_split(ofsted_tree_sprout, strata = prev_out)
ofsted_train <- training(ofsted_split)
ofsted_test <- testing(ofsted_split)
set.seed(310188)
ofsted_boot <- bootstraps(ofsted_train)
ofsted_boot
log_reg_mod <- logistic_reg() %>%
set_engine("glm")
rf_mod <- rand_forest() %>%
set_mode("classification") %>%
set_engine("ranger")
ofsted_wf <- workflow() %>%
add_formula(current_out ~ .)
ofsted_wf
log_res_results <- ofsted_wf %>%
add_model(log_reg_mod) %>%
fit_resamples(
resamples = ofsted_boot,
control = control_resamples(save_pred = TRUE, verbose = TRUE)
)
ofsted_wf <- workflow() %>%
add_formula(curr_out ~ .)
ofsted_wf
log_res_results <- ofsted_wf %>%
add_model(log_reg_mod) %>%
fit_resamples(
resamples = ofsted_boot,
control = control_resamples(save_pred = TRUE, verbose = TRUE)
)
rf_results <- ofsted_wf %>%
add_model(rf_mod) %>%
fit_resamples(
resamples = ofsted_boot,
control = control_resamples(save_pred = TRUE, verbose = TRUE)
)
filter(!is.na(IDACI) & !is.na(num_pupils)
ofsted_tree_root <- ofsted_tree_root %>%
ofsted_tree_root <- ofsted_tree_root %>%
filter(!(is.na(IDACI)) & !(is.na(num_pupils)))
ofsted_tree_sprout <- ofsted_tree_root %>%
select(prev_out, curr_out, Ofstedphase, Academy, IDACI, num_pupils)
set.seed(061183)
ofsted_split <- initial_split(ofsted_tree_sprout, strata = prev_out)
ofsted_train <- training(ofsted_split)
ofsted_test <- testing(ofsted_split)
set.seed(310188)
ofsted_boot <- bootstraps(ofsted_train)
ofsted_boot
log_reg_mod <- logistic_reg() %>%
set_engine("glm")
rf_mod <- rand_forest() %>%
set_mode("classification") %>%
set_engine("ranger")
ofsted_wf <- workflow() %>%
add_formula(curr_out ~ .)
ofsted_wf
log_res_results <- ofsted_wf %>%
add_model(log_reg_mod) %>%
fit_resamples(
resamples = ofsted_boot,
control = control_resamples(save_pred = TRUE, verbose = TRUE)
)
rf_results <- ofsted_wf %>%
add_model(rf_mod) %>%
fit_resamples(
resamples = ofsted_boot,
control = control_resamples(save_pred = TRUE, verbose = TRUE)
)
out <- collect_metrics(rf_results)
view(out)
out2 <- rf_results %>%
conf_mat_resampled()
view(out2)
out3 <- rf_results %>%
collect_predictions()
out3
view(out3)
out3 <- rf_results %>%
collect_predictions() %>%
group_by(id) %>%
roc_curve(curr_out, .pred_class)
out3 <- rf_results %>%
collect_predictions() %>%
group_by(id) %>%
roc_curve(curr_out, .pred_class) %>%
autoplot()
out3 <- rf_results %>%
collect_predictions() %>%
group_by(id) %>%
roc_curve(curr_out, .pred_1) %>%
autoplot()
out3 <- rf_results %>%
collect_predictions() %>%
group_by(id) %>%
roc_curve(curr_out, .pred_1, .pred_2, .pred_3, .pred_4) %>%
autoplot()
view(out3)
out3 <- rf_results %>%
collect_predictions() %>%
group_by(id) %>%
roc_curve(curr_out, .pred_class) %>%
autoplot()
out3 <- rf_results %>%
collect_predictions() %>%
group_by(id) %>%
roc_curve(curr_out, as.integer(.pred_class)) %>%
autoplot()
out3 <- rf_results %>%
collect_predictions() %>%
group_by(id) %>%
roc_curve(curr_out, as.integer(`.pred_class`)) %>%
autoplot()
out3 <- rf_results %>%
collect_predictions() %>%
group_by(id) %>%
roc_curve(curr_out) %>%
autoplot()
out3 <- rf_results %>%
collect_predictions() %>%
group_by(id) %>%
roc_curve(truth = curr_out) %>%
autoplot()
out3 <- rf_results %>%
collect_predictions() %>%
group_by(id) %>%
roc_curve(truth = curr_out, options = c(.pred_1, .pred_2, .pred_3, .pred_4)) %>%
autoplot()
out3 <- rf_results %>%
collect_predictions() %>%
group_by(id) %>%
roc_curve(curr_out, c(.pred_1, .pred_2, .pred_3, .pred_4)) %>%
autoplot()
(out3 <- rf_results %>%
collect_predictions() %>%
group_by(id) %>%
roc_curve(curr_out, c(.pred_1, .pred_2, .pred_3, .pred_4)) %>%
autoplot())
