if(!require("pivottabler")) install.packages("pivottabler", dependencies = TRUE)
if(!require("devtools")) install.packages("devtools", dependencies = TRUE)
if(!require("rpart")) install.packages("rpart", dependencies = TRUE)
if(!require("rpart.plot")) install.packages("rpart.plot", dependencies = TRUE)
if(!require("tidymodels")) install.packages("tidymodels", dependencies = TRUE)
if(!require("broom.mixed")) install.packages("broom.mixed", dependencies = TRUE)
if(!require("readr")) install.packages("readr", dependencies = TRUE)
if(!require("rstanarm")) install.packages("rstanarm", dependencies = TRUE)
if(!require("ranger")) install.packages("ranger", dependencies = TRUE)
if(!require("knitr")) install.packages("knitr", dependencies = TRUE)
if(!require("skimr")) install.packages("skimr", dependencies = TRUE)
# The data I need is on the 10th sheet and I'm also interested in dates. Also the top row is not the header row for the sheet, hence the different start row.
ofsted <- read.xlsx(
"data/Management_information_-_state-funded_schools_-_as_at_31_August_2020.xlsx",
sheet = 10,
startRow = 2,
detectDates = TRUE,
na.strings = "NULL"
)
edubase <- read_csv(
"data/edubasealldata20200921.csv",
col_types = cols(`SEN13 (name)` = col_skip(),
FEHEIdentifier = col_skip(),
InspectorateReport = col_skip(),
DateOfLastInspectionVisit = col_skip(),
SiteName = col_skip()
),
guess_max = 10000
)
edubase_to_ofsted <- select(
mutate(
edubase,
Academy = ifelse(`EstablishmentTypeGroup (code)` == 10 | `EstablishmentTypeGroup (code)` == 11,1,0)),
URN,
Easting,
Northing,
Academy,
`DistrictAdministrative (code)`,
`DistrictAdministrative (name)`,
`LSOA (name)`,
`LSOA (code)`
)
ofsted <- left_join(x = ofsted, y = edubase_to_ofsted, x.URN = y.URN)
ofsted <- mutate(ofsted, LA.Code = as.integer(substr(LAESTAB,1,3)))
ofsted <- ofsted %>%
mutate(days_between = Publication.date - Previous.publication.date)
ofsted_filtered <- filter(ofsted, !is.na(Previous.full.inspection.overall.effectiveness))
# The IDACI part had () as part of the name and that was causing a lot of issues so the following piece of code goes through all the column names of the dataframe and removes punctuation and spaces. Hopefully this is something that can be done earlier on, possibly when the files are read in at some point.
colnames(ofsted_filtered) <- str_replace_all(colnames(ofsted_filtered),"[:punct:]|[:space:]","")
ofsted_filtered <- mutate(ofsted_filtered, prev_out = as.integer(ifelse(Previousfullinspectionoveralleffectiveness == "NULL", -1, Previousfullinspectionoveralleffectiveness)))
ofsted_filtered <- mutate(ofsted_filtered, curr_out = as.integer(ifelse(Overalleffectiveness == "NULL", -1, Overalleffectiveness)))
ofsted_filtered <- mutate(ofsted_filtered, IDACI = as.integer(ifelse(TheincomedeprivationaffectingchildrenindexIDACIquintile == "NULL", -1, TheincomedeprivationaffectingchildrenindexIDACIquintile)))
ofsted_filtered <- mutate(ofsted_filtered, num_pupils = as.integer(ifelse(Totalnumberofpupils == "NULL", -1, Totalnumberofpupils)))
ofsted_filtered <- ofsted_filtered %>%
select(LAESTAB, Ofstedphase, Easting, Northing, Academy, DistrictAdministrativecode,
LSOAcode, LACode, prev_out, curr_out, IDACI, num_pupils)
# this will help you to whittle down your variables- you have some problems
skim(ofsted_filtered)
ofsted_filtered <- filter(ofsted, !is.na(Previous.full.inspection.overall.effectiveness))
# The IDACI part had () as part of the name and that was causing a lot of issues so the following piece of code goes through all the column names of the dataframe and removes punctuation and spaces. Hopefully this is something that can be done earlier on, possibly when the files are read in at some point.
colnames(ofsted_filtered) <- str_replace_all(colnames(ofsted_filtered),"[:punct:]|[:space:]","")
ofsted_filtered <- mutate(ofsted_filtered, prev_out = as.integer(ifelse(Previousfullinspectionoveralleffectiveness == "NULL", -1, Previousfullinspectionoveralleffectiveness)))
ofsted_filtered <- mutate(ofsted_filtered, curr_out = as.integer(ifelse(Overalleffectiveness == "NULL", -1, Overalleffectiveness)))
ofsted_filtered <- mutate(ofsted_filtered, IDACI = as.integer(ifelse(TheincomedeprivationaffectingchildrenindexIDACIquintile == "NULL", -1, TheincomedeprivationaffectingchildrenindexIDACIquintile)))
ofsted_filtered <- mutate(ofsted_filtered, num_pupils = as.integer(ifelse(Totalnumberofpupils == "NULL", -1, Totalnumberofpupils)))
ofsted_filtered <- ofsted_filtered %>%
select(LAESTAB, Ofstedphase, Easting, Northing, Academy, DistrictAdministrativecode,
LSOAcode, LACode, prev_out, curr_out, IDACI, num_pupils)
# this will help you to whittle down your variables- you have some problems
skimr::skim(ofsted_filtered)
# LAESTAB- I'm not sure what this is. It's a very big number?
# LSOAcode- There are 15,000 unique values for this, which is way too many
# LACode- this is being treated as numeric. It is also very numerous, maybe better to exlcude
# DistrictAdministrativecode- 317 unique values of this
# Easting and Northing- do you really think that there is a linear relationship
# between how north/ east something is and the probability? Possible but unlikely
# I remove these variables further down
ofsted_filtered <- ofsted_filtered %>%
mutate(prev_out = factor(prev_out),
curr_out = factor(curr_out),
Ofstedphase = factor(Ofstedphase),
IDACI = factor(IDACI),
Academy = factor(Academy))
ofsted_filtered <- ofsted_filtered %>%
filter(!(is.na(IDACI)) & !(is.na(num_pupils)))
ofsted_filtered <- ofsted_filtered %>%
mutate(prev_good = ifelse(prev_out == "1" | prev_out == "2", "Y", "N"),
curr_good = ifelse(curr_out == "1" | curr_out == "2", "Y", "N")) %>%
mutate(prev_good = factor(prev_good), curr_good = factor(curr_good))
warwickshire_future <- ofsted_filtered %>%
filter(LACode == 937) %>%
select(-prev_out, -prev_good) %>%
rename(prev_out = curr_out) %>%
rename(prev_good = curr_good) %>%
add_column(curr_good = NA) %>%
mutate(curr_good = as.factor(curr_good))
ofsted_filtered_model <- ofsted_filtered %>%
select(-curr_out, -LAESTAB, -LSOAcode, -LACode, -DistrictAdministrativecode,
-Easting, -Northing)
rf_model <- rand_forest(trees = 100, mode = "classification") %>%
set_engine("ranger") %>%
fit(curr_good ~ ., data = ofsted_filtered_model)
# This part works with the reduced dataset
log_reg_mod <- logistic_reg() %>%
set_engine("glm") %>%
set_mode("classification")
ofsted_wf <- workflow() %>%
add_formula(curr_good ~ .)
log_reg_model <- ofsted_wf %>%
add_model(log_reg_mod) %>%
fit(data = ofsted_filtered_model)
test <- ofsted_filtered %>%
filter(LAESTAB == 3594026) %>%
mutate(prev_out = factor(prev_out),
curr_out = factor(curr_out),
Ofstedphase = factor(Ofstedphase),
IDACI = factor(IDACI),
Academy = factor(Academy),
prev_good = ifelse(prev_out == "1" | prev_out == "2", "Y", "N"),
curr_good = ifelse(curr_out == "1" | curr_out == "2", "Y", "N")) %>%
mutate(prev_good = factor(prev_good),
curr_good = factor(curr_good)) %>%
select(LAESTAB, Ofstedphase, Easting, Northing, Academy, DistrictAdministrativecode, LSOAcode, LACode, prev_out, IDACI, num_pupils, prev_good, curr_good)
test_rf_outcome <- predict(rf_model, test, type = "prob")
model_rf_outcome <- predict(rf_model, warwickshire_future, type = "prob")
warwickshire_map_output <- bind_cols(warwickshire_future, model_rf_outcome)
warwickshire_map_output <- warwickshire_map_output %>%
rename(bad_out_chance = .pred_N) %>%
rename(good_out_chance = .pred_Y)
View(ofsted_filtered)
ofsted_filtered <- filter(ofsted, !is.na(Previous.full.inspection.overall.effectiveness))
# The IDACI part had () as part of the name and that was causing a lot of issues so the following piece of code goes through all the column names of the dataframe and removes punctuation and spaces. Hopefully this is something that can be done earlier on, possibly when the files are read in at some point.
colnames(ofsted_filtered) <- str_replace_all(colnames(ofsted_filtered),"[:punct:]|[:space:]","")
ofsted_filtered <- mutate(ofsted_filtered, prev_out = as.integer(ifelse(Previousfullinspectionoveralleffectiveness == "NULL", -1, Previousfullinspectionoveralleffectiveness)))
ofsted_filtered <- mutate(ofsted_filtered, curr_out = as.integer(ifelse(Overalleffectiveness == "NULL", -1, Overalleffectiveness)))
ofsted_filtered <- mutate(ofsted_filtered, IDACI = as.integer(ifelse(TheincomedeprivationaffectingchildrenindexIDACIquintile == "NULL", -1, TheincomedeprivationaffectingchildrenindexIDACIquintile)))
ofsted_filtered <- mutate(ofsted_filtered, num_pupils = as.integer(ifelse(Totalnumberofpupils == "NULL", -1, Totalnumberofpupils)))
ofsted_filtered <- ofsted_filtered %>%
select(LAESTAB, Ofstedphase, Easting, Northing, Academy, DistrictAdministrativecode,
LSOAcode, LACode, prev_out, curr_out, IDACI, num_pupils)
# this will help you to whittle down your variables- you have some problems
skimr::skim(ofsted_filtered)
# LAESTAB- I'm not sure what this is. It's a very big number?
# LSOAcode- There are 15,000 unique values for this, which is way too many
# LACode- this is being treated as numeric. It is also very numerous, maybe better to exlcude
# DistrictAdministrativecode- 317 unique values of this
# Easting and Northing- do you really think that there is a linear relationship
# between how north/ east something is and the probability? Possible but unlikely
# I remove these variables further down
ofsted_filtered <- ofsted_filtered %>%
mutate(prev_out = factor(prev_out),
curr_out = factor(curr_out),
Ofstedphase = factor(Ofstedphase),
IDACI = factor(IDACI),
Academy = factor(Academy))
ofsted_filtered <- ofsted_filtered %>%
filter(!(is.na(IDACI)) & !(is.na(num_pupils)))
ofsted_filtered <- ofsted_filtered %>%
mutate(prev_good = ifelse(prev_out == "1" | prev_out == "2", "Y", "N"),
curr_good = ifelse(curr_out == "1" | curr_out == "2", "Y", "N")) %>%
mutate(prev_good = factor(prev_good), curr_good = factor(curr_good))
View(ofsted_filtered)
ofsted_filtered_pre_model <- ofsted_filtered %>%
select(-LAESTAB, -Easting, -Northing, -DistrictAdministrativecode, -LSOAcode, -LACode)
warwickshire_future <- ofsted_filtered_pre_model %>%
filter(LACode == 937) %>%
select(-prev_out, -prev_good) %>%
rename(prev_out = curr_out) %>%
rename(prev_good = curr_good) %>%
add_column(curr_good = NA) %>%
mutate(curr_good = as.factor(curr_good))
ofsted_filtered_pre_model <- ofsted_filtered %>%
select(-LAESTAB, -Easting, -Northing, -DistrictAdministrativecode, -LSOAcode)
warwickshire_future <- ofsted_filtered_pre_model %>%
filter(LACode == 937) %>%
select(-prev_out, -prev_good) %>%
rename(prev_out = curr_out) %>%
rename(prev_good = curr_good) %>%
add_column(curr_good = NA) %>%
mutate(curr_good = as.factor(curr_good))
warwickshire_future <- ofsted_filtered_pre_model %>%
filter(LACode == 937) %>%
select(-prev_out, -prev_good) %>%
rename(prev_out = curr_out) %>%
rename(prev_good = curr_good) %>%
add_column(curr_good = NA) %>%
mutate(curr_good = as.factor(curr_good)) %>%
select(-LACode)
ofsted_filtered_model <- ofsted_filtered_pre_model %>%
select(-curr_out, -LACode)
rf_model <- rand_forest(trees = 100, mode = "classification") %>%
set_engine("ranger") %>%
fit(curr_good ~ ., data = ofsted_filtered_model)
# This part works with the reduced dataset
log_reg_mod <- logistic_reg() %>%
set_engine("glm") %>%
set_mode("classification")
ofsted_wf <- workflow() %>%
add_formula(curr_good ~ .)
log_reg_model <- ofsted_wf %>%
add_model(log_reg_mod) %>%
fit(data = ofsted_filtered_model)
test <- ofsted_filtered %>%
filter(LAESTAB == 3594026) %>%
mutate(prev_out = factor(prev_out),
curr_out = factor(curr_out),
Ofstedphase = factor(Ofstedphase),
IDACI = factor(IDACI),
Academy = factor(Academy),
prev_good = ifelse(prev_out == "1" | prev_out == "2", "Y", "N"),
curr_good = ifelse(curr_out == "1" | curr_out == "2", "Y", "N")) %>%
mutate(prev_good = factor(prev_good),
curr_good = factor(curr_good)) %>%
select(LAESTAB, Ofstedphase, Easting, Northing, Academy, DistrictAdministrativecode, LSOAcode, LACode, prev_out, IDACI, num_pupils, prev_good, curr_good)
View(warwickshire_future)
View(ofsted_filtered_pre_model)
View(ofsted_filtered_model)
View(test)
test <- ofsted_filtered %>%
filter(LAESTAB == 3594026) %>%
mutate(prev_out = factor(prev_out),
curr_out = factor(curr_out),
Ofstedphase = factor(Ofstedphase),
IDACI = factor(IDACI),
Academy = factor(Academy),
prev_good = ifelse(prev_out == "1" | prev_out == "2", "Y", "N"),
curr_good = ifelse(curr_out == "1" | curr_out == "2", "Y", "N")) %>%
mutate(prev_good = factor(prev_good),
curr_good = factor(curr_good)) %>%
select(Ofstedphase, Academy, prev_out, IDACI, num_pupils, prev_good, curr_good)
View(test)
test_rf_outcome <- predict(rf_model, test, type = "prob")
View(test_rf_outcome)
model_rf_outcome <- predict(rf_model, warwickshire_future, type = "prob")
View(model_rf_outcome)
warwickshire_map_output_rf <- bind_cols(warwickshire_future, model_rf_outcome)
View(warwickshire_map_output_rf)
warwickshire_map_output_rf <- warwickshire_map_output_rf %>%
rename(bad_out_chance = .pred_N) %>%
rename(good_out_chance = .pred_Y)
View(ofsted)
ofsted_rejoin_rf <- ofsted %>%
select(URN, LAESTAB, School.name, Type.of.education, Region, Local.authority, Publication.date, Overall.effectiveness, Previous.publication.date, Previous.full.inspection.overall.effectiveness, days_between, `LSOA (code)`, LA.Code, `DistrictAdministrative (code)`, Easting, Northing)
colnames(ofsted_rejoin_rf) <- str_replace_all(colnames(ofsted_rejoin),"[:punct:]|[:space:]","")
ofsted_rejoin_rf <- ofsted %>%
select(URN, LAESTAB, School.name, Type.of.education, Region, Local.authority, Publication.date, Overall.effectiveness, Previous.publication.date, Previous.full.inspection.overall.effectiveness, days_between, `LSOA (code)`, LA.Code, `DistrictAdministrative (code)`, Easting, Northing)
colnames(ofsted_rejoin_rf) <- str_replace_all(colnames(ofsted_rejoin_rf),"[:punct:]|[:space:]","")
View(ofsted_rejoin_rf)
ofsted_rejoin_rf <- ofsted_filtered %>%
select(URN, LAESTAB, School.name, Type.of.education, Region, Local.authority, Publication.date, Overall.effectiveness, Previous.publication.date, Previous.full.inspection.overall.effectiveness, days_between, `LSOA (code)`, LA.Code, `DistrictAdministrative (code)`, Easting, Northing) %>%
filter(LA.Code == 937)
ofsted_filtered <- filter(ofsted, !is.na(Previous.full.inspection.overall.effectiveness))
# The IDACI part had () as part of the name and that was causing a lot of issues so the following piece of code goes through all the column names of the dataframe and removes punctuation and spaces. Hopefully this is something that can be done earlier on, possibly when the files are read in at some point.
colnames(ofsted_filtered) <- str_replace_all(colnames(ofsted_filtered),"[:punct:]|[:space:]","")
ofsted_filtered <- mutate(ofsted_filtered, prev_out = as.integer(ifelse(Previousfullinspectionoveralleffectiveness == "NULL", -1, Previousfullinspectionoveralleffectiveness)))
ofsted_filtered <- mutate(ofsted_filtered, curr_out = as.integer(ifelse(Overalleffectiveness == "NULL", -1, Overalleffectiveness)))
ofsted_filtered <- mutate(ofsted_filtered, IDACI = as.integer(ifelse(TheincomedeprivationaffectingchildrenindexIDACIquintile == "NULL", -1, TheincomedeprivationaffectingchildrenindexIDACIquintile)))
ofsted_filtered <- mutate(ofsted_filtered, num_pupils = as.integer(ifelse(Totalnumberofpupils == "NULL", -1, Totalnumberofpupils)))
ofsted_filtered <- ofsted_filtered %>%
select(URN, LAESTAB, Ofstedphase, Easting, Northing, Academy, DistrictAdministrativecode,
LSOAcode, LACode, prev_out, curr_out, IDACI, num_pupils)
# this will help you to whittle down your variables- you have some problems
skimr::skim(ofsted_filtered)
# LAESTAB- I'm not sure what this is. It's a very big number?
# LSOAcode- There are 15,000 unique values for this, which is way too many
# LACode- this is being treated as numeric. It is also very numerous, maybe better to exlcude
# DistrictAdministrativecode- 317 unique values of this
# Easting and Northing- do you really think that there is a linear relationship
# between how north/ east something is and the probability? Possible but unlikely
# I remove these variables further down
ofsted_filtered <- ofsted_filtered %>%
mutate(prev_out = factor(prev_out),
curr_out = factor(curr_out),
Ofstedphase = factor(Ofstedphase),
IDACI = factor(IDACI),
Academy = factor(Academy))
ofsted_filtered <- ofsted_filtered %>%
filter(!(is.na(IDACI)) & !(is.na(num_pupils)))
ofsted_filtered <- ofsted_filtered %>%
mutate(prev_good = ifelse(prev_out == "1" | prev_out == "2", "Y", "N"),
curr_good = ifelse(curr_out == "1" | curr_out == "2", "Y", "N")) %>%
mutate(prev_good = factor(prev_good), curr_good = factor(curr_good))
ofsted_filtered <- filter(ofsted, !is.na(Previous.full.inspection.overall.effectiveness))
# The IDACI part had () as part of the name and that was causing a lot of issues so the following piece of code goes through all the column names of the dataframe and removes punctuation and spaces. Hopefully this is something that can be done earlier on, possibly when the files are read in at some point.
colnames(ofsted_filtered) <- str_replace_all(colnames(ofsted_filtered),"[:punct:]|[:space:]","")
ofsted_filtered <- mutate(ofsted_filtered, prev_out = as.integer(ifelse(Previousfullinspectionoveralleffectiveness == "NULL", -1, Previousfullinspectionoveralleffectiveness)))
ofsted_filtered <- mutate(ofsted_filtered, curr_out = as.integer(ifelse(Overalleffectiveness == "NULL", -1, Overalleffectiveness)))
ofsted_filtered <- mutate(ofsted_filtered, IDACI = as.integer(ifelse(TheincomedeprivationaffectingchildrenindexIDACIquintile == "NULL", -1, TheincomedeprivationaffectingchildrenindexIDACIquintile)))
ofsted_filtered <- mutate(ofsted_filtered, num_pupils = as.integer(ifelse(Totalnumberofpupils == "NULL", -1, Totalnumberofpupils)))
ofsted_filtered <- ofsted_filtered %>%
select(URN, LAESTAB, Schoolname, Ofstedphase, Typeofeducation, Region, Localauthority, Publicationdate, Overalleffectiveness, Previouspublicationdate, Previousfullinspectionoveralleffectiveness, Easting, Northing, Academy, DistrictAdministrativecode, LSOAcode, LACode, daysbetween, prev_out, curr_out, IDACI, num_pupils)
# this will help you to whittle down your variables- you have some problems
skimr::skim(ofsted_filtered)
# LAESTAB- I'm not sure what this is. It's a very big number?
# LSOAcode- There are 15,000 unique values for this, which is way too many
# LACode- this is being treated as numeric. It is also very numerous, maybe better to exlcude
# DistrictAdministrativecode- 317 unique values of this
# Easting and Northing- do you really think that there is a linear relationship
# between how north/ east something is and the probability? Possible but unlikely
# I remove these variables further down
ofsted_filtered <- ofsted_filtered %>%
mutate(prev_out = factor(prev_out),
curr_out = factor(curr_out),
Ofstedphase = factor(Ofstedphase),
IDACI = factor(IDACI),
Academy = factor(Academy))
ofsted_filtered <- ofsted_filtered %>%
filter(!(is.na(IDACI)) & !(is.na(num_pupils)))
ofsted_filtered <- ofsted_filtered %>%
mutate(prev_good = ifelse(prev_out == "1" | prev_out == "2", "Y", "N"),
curr_good = ifelse(curr_out == "1" | curr_out == "2", "Y", "N")) %>%
mutate(prev_good = factor(prev_good), curr_good = factor(curr_good))
ofsted_filtered_pre_model <- ofsted_filtered %>%
select(Ofstedphase, Academy, prev_out, IDACI, num_pupils, prev_good, curr_good, LACode)
warwickshire_future <- ofsted_filtered_pre_model %>%
filter(LACode == 937) %>%
select(-prev_out, -prev_good) %>%
rename(prev_out = curr_out) %>%
rename(prev_good = curr_good) %>%
add_column(curr_good = NA) %>%
mutate(curr_good = as.factor(curr_good)) %>%
select(-LACode)
ofsted_filtered_pre_model <- ofsted_filtered %>%
select(Ofstedphase, Academy, curr_out, prev_out, IDACI, num_pupils, prev_good, curr_good, LACode)
warwickshire_future <- ofsted_filtered_pre_model %>%
filter(LACode == 937) %>%
select(-prev_out, -prev_good) %>%
rename(prev_out = curr_out) %>%
rename(prev_good = curr_good) %>%
add_column(curr_good = NA) %>%
mutate(curr_good = as.factor(curr_good)) %>%
select(-LACode)
ofsted_filtered_model <- ofsted_filtered_pre_model %>%
select(-curr_out, -LACode)
rf_model <- rand_forest(trees = 100, mode = "classification") %>%
set_engine("ranger") %>%
fit(curr_good ~ ., data = ofsted_filtered_model)
# This part works with the reduced dataset
log_reg_mod <- logistic_reg() %>%
set_engine("glm") %>%
set_mode("classification")
ofsted_wf <- workflow() %>%
add_formula(curr_good ~ .)
log_reg_model <- ofsted_wf %>%
add_model(log_reg_mod) %>%
fit(data = ofsted_filtered_model)
test <- ofsted_filtered %>%
filter(LAESTAB == 3594026) %>%
mutate(prev_out = factor(prev_out),
curr_out = factor(curr_out),
Ofstedphase = factor(Ofstedphase),
IDACI = factor(IDACI),
Academy = factor(Academy),
prev_good = ifelse(prev_out == "1" | prev_out == "2", "Y", "N"),
curr_good = ifelse(curr_out == "1" | curr_out == "2", "Y", "N")) %>%
mutate(prev_good = factor(prev_good),
curr_good = factor(curr_good)) %>%
select(Ofstedphase, Academy, prev_out, IDACI, num_pupils, prev_good, curr_good)
test_rf_outcome <- predict(rf_model, test, type = "prob")
model_rf_outcome <- predict(rf_model, warwickshire_future, type = "prob")
warwickshire_map_output_rf <- bind_cols(warwickshire_future, model_rf_outcome)
warwickshire_map_output_rf <- warwickshire_map_output_rf %>%
rename(bad_out_chance = .pred_N) %>%
rename(good_out_chance = .pred_Y)
ofsted_rejoin_rf <- ofsted_filtered %>%
filter(LACode == 937)
warwickshire_map_output_rf <- warwickshire_map_output_rf %>%
select(Ofstedphase, Academy, IDACI, num_pupils, bad_out_chance, good_out_chance)
warwickshire_map_output_rf <- bind_cols(warwickshire_map_output_rf, ofsted_rejoin_rf)
View(warwickshire_map_output_rf)
model_rf_outcome <- predict(rf_model, warwickshire_future, type = "prob")
warwickshire_map_output_rf <- model_rf_outcome %>%
rename(bad_out_chance = .pred_N) %>%
rename(good_out_chance = .pred_Y)
View(warwickshire_map_output_rf)
ofsted_rejoin_rf <- ofsted_filtered %>%
filter(LACode == 937)
warwickshire_map_output_rf <- bind_cols(warwickshire_map_output_rf, ofsted_rejoin_rf)
View(warwickshire_map_output_rf)
write.csv(warwickshire_map_output, file = "C:/Users/acar3/OneDrive - Warwickshire County Council/Desktop/Data Science Accelerator/Ofsted Outcome Predictor/Ofsted-Outcome-Predictor/data/Inspection Outcome Map Data.csv")
write.csv(warwickshire_map_output, file = "C:/Users/acar3/OneDrive - Warwickshire County Council/Desktop/Data Science Accelerator/Ofsted Outcome Predictor/Ofsted-Outcome-Predictor/data/Inspection Outcome Map Data - Random Forest.csv")
# We can reuse the test data from before
test_lr_outcome <- predict(log_reg_model, test, type = "prob")
model_lr_outcome <- predict(log_reg_model, warwickshire_future, type = "prob")
warwickshire_map_output_lr <- model_lr_outcome %>%
rename(bad_out_chance = .pred_N) %>%
rename(good_out_chance = .pred_Y)
ofsted_rejoin_lr <- ofsted_filtered %>%
filter(LACode == 937)
warwickshire_map_output_lr <- bind_cols(warwickshire_map_output_lr, ofsted_rejoin_lr)
write.csv(warwickshire_map_output, file = "C:/Users/acar3/OneDrive - Warwickshire County Council/Desktop/Data Science Accelerator/Ofsted Outcome Predictor/Ofsted-Outcome-Predictor/data/Inspection Outcome Map Data - Logistic Regression.csv")
knitr::opts_chunk$set(echo = TRUE)
install.packages(c(
"gapminder", "ggforce", "globals", "openintro", "shiny",
"shinycssloaders", "shinyFeedback", "shinythemes", "testthat",
"thematic", "tidyverse", "vroom", "waiter", "xml2", "zeallot"
))
install.packages(c("gapminder", "ggforce", "globals", "openintro", "shiny", "shinycssloaders", "shinyFeedback", "shinythemes", "testthat", "thematic", "tidyverse", "vroom", "waiter", "xml2", "zeallot"))
library(shiny)
runApp('OfstedMap')
runApp('OfstedMap')
runApp('OfstedMap')
runApp('OfstedMap')
runApp('OfstedMap')
runApp('OfstedMap')
runApp('OfstedMap')
runApp('OfstedMap')
runApp('OfstedMap')
runApp()
runApp()
runApp('OfstedMap')
runApp('OfstedMap')
runApp()
runApp('OfstedMap')
runApp('OfstedMap')
runApp('OfstedMap')
runApp('OfstedMap')
runApp('OfstedMap')
runApp()
runApp('OfstedMap')
runApp('OfstedMap')
runApp('OfstedMap')
runApp('OfstedMap')
runApp('OfstedMap')
runApp('OfstedMap')
runApp('OfstedMap')
runApp('OfstedMap')
runApp('OfstedMap')
runApp('OfstedMap')
runApp()
runApp('OfstedMap')
runApp('OfstedMap')
runApp('OfstedMap')
View(warwickshire_map_output_lr)
runApp('OfstedMap')
runApp('OfstedMap')
runApp('OfstedMap')
runApp('OfstedMap')
runApp('OfstedMap')
runApp('OfstedMap')
runApp('OfstedMap')
runApp('OfstedMap')
runApp('OfstedMap')
runApp('OfstedMap')
install.packages(c(
"gapminder", "ggforce", "globals", "openintro", "shiny",
"shinycssloaders", "shinyFeedback", "shinythemes", "testthat",
"thematic", "tidyverse", "vroom", "waiter", "xml2", "zeallot", "shinyWidgets"
))
install.packages(c("gapminder", "ggforce", "globals", "openintro", "shiny", "shinycssloaders", "shinyFeedback", "shinythemes", "testthat", "thematic", "tidyverse", "vroom", "waiter", "xml2", "zeallot", "shinyWidgets"))
runApp('OfstedMap')
runApp('OfstedMap')
runApp('OfstedMap')
runApp('OfstedMap')
runApp('OfstedMap')
runApp('OfstedMap')
runApp('OfstedMap')
runApp('OfstedMap')
runApp('OfstedMap')
runApp('OfstedMap')
runApp('OfstedMap')
runApp('OfstedMap')
runApp('OfstedMap')
runApp('OfstedMap')
runApp('OfstedMap')
runApp()
runApp('OfstedMap')
runApp('OfstedMap')
runApp('OfstedMap')
runApp('OfstedMap')
runApp('OfstedMap')
runApp('OfstedMap')
runApp()
runApp('OfstedMap')
runApp('OfstedMap')
shiny::runApp('OfstedMap')
runApp('OfstedMap')
runApp('OfstedMap')
runApp('OfstedMap')
runApp('OfstedMap')
runApp('OfstedMap')
runApp('OfstedMap')
runApp('OfstedMap')
runApp('OfstedMap')
runApp('OfstedMap')
runApp('OfstedMap')
runApp('OfstedMap')
runApp()
runApp('OfstedMap')
runApp('OfstedMap')
runApp()
runApp('OfstedMap')
runApp()
runApp('OfstedMap')
runApp('OfstedMap')
runApp('OfstedMap')
runApp('OfstedMap')
runApp('OfstedMap')
runApp('OfstedMap')
runApp('OfstedMap')
runApp('OfstedMap')
runApp('OfstedMap')
runApp('OfstedMap')
runApp('OfstedMap')
runApp('OfstedMap')
runApp('OfstedMap')
runApp('OfstedMap')
runApp('OfstedMap')
runApp('OfstedMap')
runApp('OfstedMap')
runApp('OfstedMap')
runApp('OfstedMap')
